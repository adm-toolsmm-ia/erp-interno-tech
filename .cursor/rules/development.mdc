---
alwaysApply: true
description: "PadrÃµes de desenvolvimento, commits, branches e testes"
globs: *.ts,*.tsx,*.js,*.jsx,*.md,*.json
---

# ðŸ’» ERP Development Standards

## PadrÃµes de Commit ObrigatÃ³rios

### Formato
```
<tipo>(ERP/<escopo>): <descriÃ§Ã£o>
```

### Tipos
- **feat**: Nova funcionalidade
- **fix**: CorreÃ§Ã£o de bug
- **docs**: DocumentaÃ§Ã£o
- **chore**: Tarefas de manutenÃ§Ã£o
- **refactor**: RefatoraÃ§Ã£o
- **style**: FormataÃ§Ã£o
- **test**: Testes

### Escopos
- **UX**: Interface e experiÃªncia
- **API**: Endpoints e lÃ³gica
- **DB**: Banco de dados
- **AUTH**: AutenticaÃ§Ã£o
- **TENANT**: Multi-tenancy
- **DOCS**: DocumentaÃ§Ã£o
- **CONFIG**: ConfiguraÃ§Ãµes

### Exemplos
```bash
feat(ERP/UX): add Kanban view to Projetos
fix(ERP/API): correct Prisma validation
docs(ERP/DOCS): create UX guidelines
chore(ERP/CONFIG): update ESLint rules
```

## Aliases Git Configurados
```bash
git cm "mensagem"     # commit rÃ¡pido
git cam "mensagem"    # add + commit
git st                 # status
git last               # Ãºltimo commit
```

## PadrÃµes de Branch

### Nomenclatura
```
feature/ERP-123-add-kanban-view
fix/ERP-456-correct-validation
hotfix/ERP-789-security-patch
```

### Workflow
1. **feature/**: Desenvolvimento de funcionalidades
2. **fix/**: CorreÃ§Ãµes de bugs
3. **hotfix/**: CorreÃ§Ãµes urgentes
4. **main**: Branch principal (produÃ§Ã£o)
5. **develop**: Branch de desenvolvimento

## Testes ObrigatÃ³rios

### Estrutura
```typescript
// tests/[module]/[feature].test.ts
describe('ProjetoService', () => {
  describe('createProjeto', () => {
    it('should create projeto with empresaId', async () => {
      // Teste multi-tenancy
    });
    
    it('should validate required fields', async () => {
      // Teste validaÃ§Ã£o
    });
    
    it('should apply soft delete', async () => {
      // Teste soft delete
    });
  });
});
```

### Cobertura MÃ­nima
- **UnitÃ¡rios**: 80% para services
- **IntegraÃ§Ã£o**: 60% para APIs
- **E2E**: 40% para fluxos crÃ­ticos

### Comandos
```bash
npm run test              # Todos os testes
npm run test:unit         # Apenas unitÃ¡rios
npm run test:integration  # Apenas integraÃ§Ã£o
npm run test:coverage     # Com cobertura
```

## Estrutura de Arquivos

### OrganizaÃ§Ã£o por MÃ³dulo
```
src/
â”œâ”€â”€ modules/
â”‚   â”œâ”€â”€ empresa/
â”‚   â”‚   â”œâ”€â”€ components/
â”‚   â”‚   â”œâ”€â”€ services/
â”‚   â”‚   â”œâ”€â”€ types/
â”‚   â”‚   â””â”€â”€ tests/
â”‚   â”œâ”€â”€ cliente/
â”‚   â”œâ”€â”€ projeto/
â”‚   â””â”€â”€ documento/
```

### PadrÃµes de Nomenclatura
- **Componentes**: PascalCase (`ProjetoKanban.tsx`)
- **Hooks**: camelCase com `use` (`useProjetos.ts`)
- **Services**: PascalCase com `Service` (`ProjetoService.ts`)
- **Types**: PascalCase (`ProjetoTypes.ts`)
- **Utils**: camelCase (`projetoUtils.ts`)

## Code Quality

### ESLint Rules
```json
{
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "prefer-const": "error",
    "no-var": "error"
  }
}
```

### Prettier Config
```json
{
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "es5"
}
```

### TypeScript Strict
```json
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true
  }
}
```

## Scripts Package.json

### Desenvolvimento
```json
{
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build --turbopack",
    "start": "next start",
    "type-check": "tsc --noEmit",
    "lint": "eslint . --ext .ts,.tsx",
    "lint:fix": "eslint . --ext .ts,.tsx --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check ."
  }
}
```

### Testes
```json
{
  "scripts": {
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:ci": "jest --ci --coverage --watchAll=false"
  }
}
```

## Checklist de Desenvolvimento

### Antes de Commitar
- [ ] **Lint** passa sem erros
- [ ] **Type check** sem erros
- [ ] **Testes** passando
- [ ] **Mensagem** segue padrÃ£o
- [ ] **Branch** nomeada corretamente

### Antes de Push
- [ ] **Rebase** com main/develop
- [ ] **Conflitos** resolvidos
- [ ] **Testes** atualizados
- [ ] **DocumentaÃ§Ã£o** atualizada

### Antes de Merge
- [ ] **Code review** aprovado
- [ ] **CI/CD** passando
- [ ] **Cobertura** adequada
- [ ] **Performance** validada