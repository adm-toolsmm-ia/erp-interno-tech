---
alwaysApply: true
description: "Padr√µes de commit e mensagens para hist√≥rico limpo e rastre√°vel"
---

# üìÑ Padr√µes de Commit

## Objetivo
Padronizar as mensagens de commit para garantir hist√≥rico limpo, rastre√°vel e f√°cil de entender.
Cada tarefa conclu√≠da deve ser registrada em um commit at√¥mico com mensagem clara e estruturada.

## Estrutura dos Commits

### Formato Base
Cada commit deve come√ßar com um prefixo que indica a natureza da mudan√ßa, seguido de uma descri√ß√£o objetiva:

- **Feat:** para novas funcionalidades
- **Fix:** para corre√ß√µes de bugs
- **Refactor:** para melhorias de c√≥digo que n√£o alteram comportamento
- **Docs:** para mudan√ßas na documenta√ß√£o
- **Test:** para cria√ß√£o ou ajustes de testes
- **Chore:** para tarefas auxiliares ou de manuten√ß√£o (ex.: atualizar depend√™ncias)

### Exemplos Corretos
```
Feat: adicionar autentica√ß√£o JWT no backend
Fix: corrigir erro de timeout ao salvar pedido
Refactor: extrair l√≥gica de valida√ß√£o para service separado
Docs: adicionar guia de setup do ambiente local
Test: incluir casos de borda para API de autentica√ß√£o
Chore: atualizar depend√™ncias do Next.js para v14
```

## Regras de Granularidade

### Um Commit = Uma Tarefa At√¥mica
- **N√ÉO agrupar** v√°rias tarefas diferentes em um √∫nico commit
- Se precisar corrigir algo no meio do desenvolvimento, **preferir separar em commits diferentes**
- Cada commit deve representar uma mudan√ßa l√≥gica completa e funcional

### Descri√ß√µes Objetivas
- **Sempre em portugu√™s**, exceto termos t√©cnicos
- **Evitar descri√ß√µes vagas** como "ajustes", "update" ou "altera√ß√µes"
- A mensagem deve permitir entender o que foi feito **sem abrir o diff**
- Use verbos no infinitivo (adicionar, corrigir, refatorar, etc.)

## Qualidade Antes do Commit

### Valida√ß√µes Obrigat√≥rias
- **Testes devem ser executados** antes de confirmar o commit
- **O c√≥digo deve estar compilando** e funcional
- **Linting deve passar** sem erros
- **Build deve ser bem-sucedido**

## Checklist Antes de Commitar

- [ ] **Cada commit representa uma √∫nica tarefa at√¥mica**
- [ ] **A mensagem segue o padr√£o definido** (Feat, Fix, Refactor, Docs, Test, Chore)
- [ ] **A descri√ß√£o est√° clara, objetiva e em portugu√™s**
- [ ] **O commit n√£o mistura escopos diferentes**
- [ ] **Testes foram executados e o c√≥digo est√° funcional**
- [ ] **O hist√≥rico do reposit√≥rio permanece limpo e rastre√°vel**

## Exemplos de Commits Incorretos ‚ùå

```
// Muito vago
Update files

// M√∫ltiplas tarefas
Fix auth and add new feature

// Ingl√™s desnecess√°rio
Add new user registration

// Sem prefixo
Corrigir bug de valida√ß√£o
```

## Exemplos de Commits Corretos ‚úÖ

```
Feat: implementar sistema de notifica√ß√µes push
Fix: corrigir valida√ß√£o de CPF no formul√°rio
Refactor: separar l√≥gica de neg√≥cio do controller
Docs: atualizar README com instru√ß√µes de instala√ß√£o
Test: adicionar testes para valida√ß√£o de email
Chore: atualizar depend√™ncias de seguran√ßa
```

## Branch Naming Convention

### Padr√£o Obrigat√≥rio
Use o formato: `{tipo}/{descri√ß√£o-curta}`

### Tipos de Branch
- **feature/**: Novas funcionalidades
- **fix/**: Corre√ß√µes de bugs
- **hotfix/**: Corre√ß√µes urgentes em produ√ß√£o
- **refactor/**: Refatora√ß√µes de c√≥digo
- **docs/**: Mudan√ßas na documenta√ß√£o
- **test/**: Adi√ß√£o ou corre√ß√£o de testes
- **chore/**: Tarefas de manuten√ß√£o

### Exemplos de Nomes de Branch ‚úÖ
```
feature/user-authentication
fix/login-validation-error
hotfix/security-vulnerability
refactor/extract-validation-service
docs/api-documentation
test/add-user-service-tests
chore/update-dependencies
```

### Exemplos de Nomes de Branch ‚ùå
```
// Muito vago
feature/updates
fix/stuff

// Sem tipo
user-authentication
login-fix

// Muito longo
feature/implement-complete-user-authentication-system-with-jwt-tokens

// Caracteres especiais
feature/user@auth
fix/login-bug!
```

## Workflow de Branch

### 1. Cria√ß√£o de Branch
```bash
# Sempre partir da main/develop
git checkout main
git pull origin main
git checkout -b feature/user-authentication
```

### 2. Desenvolvimento
- **Commits pequenos e frequentes** na branch
- **Sempre seguir** padr√£o de mensagem de commit
- **Push regular** para backup e colabora√ß√£o

### 3. Pull Request
- **T√≠tulo descritivo** seguindo padr√£o de commit
- **Descri√ß√£o detalhada** do que foi implementado
- **Link para issue** relacionada (se aplic√°vel)
- **Checklist de valida√ß√£o** preenchido

### 4. Merge Strategy
- **Squash and merge** para branches de feature
- **Merge commit** para hotfixes cr√≠ticos
- **Rebase** antes do merge para hist√≥rico limpo

## Checklist de Branch

### Antes de Criar Branch
- [ ] **Branch base** est√° atualizada (main/develop)
- [ ] **Nome da branch** segue conven√ß√£o
- [ ] **Issue/requisito** est√° bem definido

### Durante Desenvolvimento
- [ ] **Commits frequentes** e bem descritos
- [ ] **Branch atualizada** regularmente com base
- [ ] **Conflitos resolvidos** antes do push

### Antes do Merge
- [ ] **Todos os testes** passando
- [ ] **Code review** aprovado
- [ ] **Branch atualizada** com base
- [ ] **Pull request** bem documentado