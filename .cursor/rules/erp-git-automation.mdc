---
alwaysApply: false
description: "Automa√ß√£o de Git para evitar Vim e padronizar commits"
---

# üîß ERP Git Automation

## Configura√ß√£o Recomendada

### 1. Configurar Editor do Git
```bash
# Para VS Code/Cursor
git config --global core.editor "code --wait"

# Para Cursor especificamente
git config --global core.editor "cursor --wait"
```

### 2. Hook de Commit (Opcional)
Criar arquivo `.git/hooks/prepare-commit-msg`:
```bash
#!/bin/sh
if [ -z "$2" ]; then
  echo "‚ùå Use sempre: git commit -m \"sua mensagem\""
  echo "üí° Exemplo: git commit -m \"feat(ERP/UX): add Kanban view\""
  exit 1
fi
```

### 3. Aliases √öteis
```bash
# Adicionar ao .gitconfig
[alias]
    cm = commit -m
    cam = commit -am
    st = status
    co = checkout
    br = branch
    unstage = reset HEAD --
    last = log -1 HEAD
    visual = !gitk
```

## Comandos Padronizados

### Commit R√°pido
```bash
# Para arquivos j√° staged
git commit -m "feat(ERP/UX): add component description"

# Para todos os arquivos modificados
git commit -am "fix(ERP/API): correct validation error"
```

### Workflow Completo
```bash
# 1. Verificar status
git status

# 2. Adicionar arquivos espec√≠ficos
git add src/components/ProjetoKanban.tsx

# 3. Commit com mensagem padronizada
git commit -m "feat(ERP/UX): add Kanban view to Projetos"

# 4. Push para reposit√≥rio
git push origin main
```

## Valida√ß√£o de Mensagens

### Regex para Valida√ß√£o
```regex
^(feat|fix|docs|chore|refactor|style|test)\(ERP\/[A-Z]+\): .{1,50}$
```

### Exemplos de Valida√ß√£o
- ‚úÖ `feat(ERP/UX): add Kanban view`
- ‚úÖ `fix(ERP/API): correct Prisma validation`
- ‚ùå `add kanban` (sem prefixo)
- ‚ùå `feat: add kanban` (sem escopo ERP)
- ‚ùå `feat(ERP/UX): add` (muito curto)

## Integra√ß√£o com Cursor

### Usar @generate para Commit
```
@generate commit-message
Contexto: Adicionei componente Kanban para visualiza√ß√£o de projetos
Tipo: feat
Escopo: UX
```

### Resposta Esperada
```
feat(ERP/UX): add Kanban component for Projetos visualization
```

## Troubleshooting

### Problema: Vim abre ao fazer commit
**Solu√ß√£o**: Configure o editor do Git
```bash
git config --global core.editor "code --wait"
```

### Problema: Hook n√£o funciona
**Solu√ß√£o**: D√™ permiss√£o de execu√ß√£o
```bash
chmod +x .git/hooks/prepare-commit-msg
```

### Problema: Mensagem muito longa
**Solu√ß√£o**: Use o padr√£o de 50 caracteres m√°ximo
```bash
# ‚ùå Muito longo
git commit -m "feat(ERP/UX): add comprehensive Kanban board component with drag and drop functionality"

# ‚úÖ Correto
git commit -m "feat(ERP/UX): add Kanban board with drag-drop"
```