---
description: "Modo Depurador - Processo sistem√°tico de depura√ß√£o"
---

# üêõ Modo Depurador

Quando solicitado a entrar no "Modo Depurador", seguir **exatamente** esta sequ√™ncia:

## 1. An√°lise Inicial
- **Reflita sobre 5 a 7 poss√≠veis causas** do problema
- **Reduza para 1 a 2 causas mais prov√°veis**

## 2. Instrumenta√ß√£o de Logs
- **Adicione logs adicionais** para validar suas suposi√ß√µes
- **Rastreie a transforma√ß√£o das estruturas de dados** ao longo do fluxo de controle da aplica√ß√£o
- **N√ÉO implemente a corre√ß√£o** ainda

## 3. Coleta de Logs
Use as ferramentas dispon√≠veis para obter logs:
- **getConsoleLogs** - logs do console do navegador
- **getConsoleErrors** - erros do console do navegador
- **getNetworkLogs** - logs de rede do navegador
- **getNetworkErrors** - erros de rede do navegador
- **Obtenha logs do servidor** se acess√≠veis, sen√£o pe√ßa para copiar e colar

## 4. An√°lise Profunda
- **Reflita profundamente** sobre o que pode estar errado
- **Produza uma an√°lise abrangente** do problema
- **Sugira logs adicionais** se o problema persistir ou se a causa ainda n√£o estiver clara

## 5. Implementa√ß√£o da Corre√ß√£o
- **Implemente a corre√ß√£o** baseada na an√°lise
- **Pe√ßa aprova√ß√£o para remover** os logs adicionados anteriormente

## 6. Valida√ß√£o
- **Confirme que o problema foi resolvido**
- **Remova logs tempor√°rios** ap√≥s confirma√ß√£o

## Ferramentas Pr√°ticas de Debugging

### Logs Estruturados
- **Use bibliotecas especializadas** (winston, pino, bunyan)
- **Formato JSON** para facilitar parsing
- **N√≠veis de log** apropriados (error, warn, info, debug)
- **Contexto estruturado** com metadata relevante

```typescript
// ‚úÖ Exemplo de log estruturado
import winston from 'winston';

const logger = winston.createLogger({
  level: 'debug',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.errors({ stack: true }),
    winston.format.json()
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'app.log' })
  ]
});

// Uso em debugging
logger.debug('Processing user registration', {
  userId: user.id,
  email: user.email,
  timestamp: new Date().toISOString(),
  requestId: req.headers['x-request-id']
});
```

### Console vs Debugger
- **Use console.log** para debugging r√°pido e tempor√°rio
- **Use debugger** para an√°lise profunda de execu√ß√£o
- **Use console.table** para arrays e objetos complexos
- **Use console.time/timeEnd** para medi√ß√£o de performance

```typescript
// ‚úÖ Exemplos de debugging eficiente
console.time('user-creation');
const user = await createUser(userData);
console.timeEnd('user-creation');

console.table(users); // Para arrays de objetos
console.group('User Processing');
console.log('Step 1:', step1Result);
console.log('Step 2:', step2Result);
console.groupEnd();

// Para debugging profundo
debugger; // Pausa execu√ß√£o no DevTools
```

### Tracing e Observabilidade
- **Implemente distributed tracing** (OpenTelemetry, Jaeger)
- **Use correlation IDs** para rastrear requests
- **Monitore m√©tricas** de performance e erro
- **Configure alertas** para problemas cr√≠ticos

```typescript
// ‚úÖ Exemplo de tracing
import { trace, context } from '@opentelemetry/api';

async function processUser(userData: UserData): Promise<User> {
  const tracer = trace.getTracer('user-service');
  
  return tracer.startActiveSpan('processUser', async (span) => {
    try {
      span.setAttributes({
        'user.email': userData.email,
        'user.role': userData.role
      });
      
      const user = await createUser(userData);
      span.setStatus({ code: SpanStatusCode.OK });
      
      return user;
    } catch (error) {
      span.setStatus({ 
        code: SpanStatusCode.ERROR, 
        message: error.message 
      });
      span.recordException(error);
      throw error;
    } finally {
      span.end();
    }
  });
}
```

### Ferramentas de Monitoramento
- **Datadog**: APM, logs, m√©tricas e alertas
- **Sentry**: Error tracking e performance monitoring
- **New Relic**: Application performance monitoring
- **Grafana + Prometheus**: M√©tricas customizadas

```typescript
// ‚úÖ Exemplo de integra√ß√£o com Sentry
import * as Sentry from '@sentry/node';

Sentry.init({
  dsn: process.env.SENTRY_DSN,
  environment: process.env.NODE_ENV,
  tracesSampleRate: 1.0,
});

// Captura de erros autom√°tica
try {
  await riskyOperation();
} catch (error) {
  Sentry.captureException(error, {
    tags: {
      section: 'user-registration',
      userId: user.id
    },
    extra: {
      userData: sanitizeUserData(userData)
    }
  });
  throw error;
}
```

### Debugging de Performance
- **Use profilers** para identificar gargalos
- **Monitore memory leaks** com heap snapshots
- **Analise bundle size** com webpack-bundle-analyzer
- **Use Lighthouse** para performance web

```typescript
// ‚úÖ Exemplo de profiling
import { performance } from 'perf_hooks';

async function debugPerformance() {
  const start = performance.now();
  
  // Opera√ß√£o a ser medida
  await heavyOperation();
  
  const end = performance.now();
  const duration = end - start;
  
  if (duration > 1000) { // > 1 segundo
    logger.warn('Slow operation detected', {
      operation: 'heavyOperation',
      duration: `${duration}ms`,
      threshold: '1000ms'
    });
  }
}
```

### Debugging de Estado
- **Use Redux DevTools** para aplica√ß√µes React/Redux
- **Implemente state snapshots** para debugging
- **Use time-travel debugging** quando poss√≠vel
- **Log state changes** com middleware

```typescript
// ‚úÖ Exemplo de state debugging
const stateLogger = (store: any) => (next: any) => (action: any) => {
  console.group(`Action: ${action.type}`);
  console.log('Previous State:', store.getState());
  console.log('Action:', action);
  
  const result = next(action);
  
  console.log('Next State:', store.getState());
  console.groupEnd();
  
  return result;
};
```

## Checklist de Debugging Avan√ßado

### Prepara√ß√£o
- [ ] **Ferramentas de debugging** instaladas e configuradas
- [ ] **Logs estruturados** implementados
- [ ] **Tracing distribu√≠do** configurado
- [ ] **Monitoramento** ativo e alertas configurados

### Durante Debugging
- [ ] **Logs contextuais** adicionados nos pontos cr√≠ticos
- [ ] **M√©tricas de performance** coletadas
- [ ] **Estado da aplica√ß√£o** capturado em snapshots
- [ ] **Correlation IDs** rastreados atrav√©s do sistema

### P√≥s-Debugging
- [ ] **Logs tempor√°rios** removidos
- [ ] **M√©tricas de baseline** estabelecidas
- [ ] **Alertas** ajustados baseados no aprendizado
- [ ] **Documenta√ß√£o** atualizada com solu√ß√µes encontradas