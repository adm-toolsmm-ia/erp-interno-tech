---
alwaysApply: true
description: "Regras mestras consolidadas do ERP Interno Tech"
---

# üéØ ERP Master Rules ‚Äî ERPInternoTech

## Contexto do Projeto
- **ERP interno** da empresa Tech em fase **MVP**
- **Back-end**: Supabase (Postgres + Storage + Edge Functions)
- **Front-end**: Next.js 15 (App Router) + Tailwind + Shadcn/UI + Prisma ORM
- **Deploy**: Vercel (Prod, Preview/Homologa√ß√£o, Dev)
- **Autentica√ß√£o**: N√£o implementada no MVP (Fase 2)

## Regras de Refer√™ncia

### Arquitetura e Padr√µes
- [Arquitetura MVP](mdc:.cursor/rules/erp-architecture-mvp.mdc) - Estrutura base e multi-tenancy
- [Database Standards](mdc:.cursor/rules/erp-database-standards.mdc) - Prisma e banco de dados
- [Security MVP](mdc:.cursor/rules/erp-security-mvp.mdc) - Seguran√ßa e valida√ß√µes
- [Business Rules](mdc:.cursor/rules/erp-business-rules.mdc) - Regras de neg√≥cio
- [AI Architecture](mdc:.cursor/rules/erp-ai-architecture.mdc) - Embeddings e IA
- [CTO Roadmap](mdc:.cursor/rules/erp-cto-roadmap.mdc) - Estrat√©gia t√©cnica

### UX/UI e Design
- [UX/UI Guidelines](mdc:docs/06-ux-ui.md) - Tokens visuais e layout
- [UX Flows](mdc:docs/07-ux-flows.md) - Comportamentos e intera√ß√µes
- [UI Components](mdc:docs/08-ux-components.md) - Gloss√°rio de componentes
- [UX Consolidated](mdc:.cursor/rules/erp-ux-consolidated.mdc) - Regras consolidadas

### Desenvolvimento e Qualidade
- [Commit Standards](mdc:.cursor/rules/erp-commit-standards.mdc) - Padr√µes de commit
- [Git Automation](mdc:.cursor/rules/erp-git-automation.mdc) - Automa√ß√£o do Git
- [Commit Templates](mdc:.cursor/rules/erp-commit-templates.mdc) - Templates de commit

## Princ√≠pios Fundamentais

### 1. Multi-Tenancy Rigorosa
- **TODAS** as opera√ß√µes devem incluir `empresaId`
- **TODAS** as queries devem filtrar por tenant
- **TODAS** as APIs devem retornar `tenantId` no meta
- **NUNCA** expor dados de outras empresas

### 2. Soft Delete Universal
- **TODOS** os modelos devem ter `deletedAt: DateTime?`
- **TODAS** as queries devem filtrar `deletedAt: null`
- **TODAS** as exclus√µes devem ser soft delete
- **NUNCA** deletar dados permanentemente

### 3. Observabilidade M√≠nima
- Endpoint `/api/health` obrigat√≥rio
- Logs de erro em console estruturados
- M√©tricas b√°sicas de performance
- Rastreamento de opera√ß√µes cr√≠ticas

### 4. Testes Obrigat√≥rios
- **SEMPRE** gerar testes unit√°rios b√°sicos (CRUD)
- **SEMPRE** testar multi-tenancy
- **SEMPRE** testar soft delete
- **SEMPRE** testar valida√ß√µes

## Estrutura de Resposta API

```typescript
interface ApiResponse<T> {
  data: T;
  meta: {
    tenantId: string;
    requestId: string;
    timestamp: string;
    version: string;
  };
}
```

## Padr√µes de Commit

```
<tipo>(ERP/<escopo>): <descri√ß√£o>

Tipos: feat, fix, docs, chore, refactor, style, test
Escopos: UX, API, DB, AUTH, TENANT, DOCS, CONFIG

Exemplos:
feat(ERP/UX): add Kanban view to Projetos
fix(ERP/API): correct Prisma validation
docs(ERP/DOCS): create UX/UI guidelines
```

## Instru√ß√µes para Cursor

### 1. Sempre Aplicar
- Multi-tenancy em todas as opera√ß√µes
- Soft delete em todos os modelos
- Valida√ß√£o de dados obrigat√≥ria
- Logs estruturados
- Testes unit√°rios b√°sicos

### 2. Para CRUDs
- `empresaId` obrigat√≥rio
- Soft delete (`deletedAt`)
- Endpoints Next.js API Routes (`app/api/...`)
- Valida√ß√£o de entrada
- Resposta padronizada

### 3. Para UI
- Respeitar [UX/UI Guidelines](mdc:docs/06-ux-ui.md)
- Seguir [UX Flows](mdc:docs/07-ux-flows.md)
- Usar [UI Components](mdc:docs/08-ux-components.md)
- Implementar responsividade
- Garantir acessibilidade

### 4. Para IA
- Embeddings com pgvector
- Versionamento de embeddings
- Logs de m√©tricas de IA
- Prompts padronizados
- Contexto modular

### 5. Para Deploy
- CI/CD com deploy autom√°tico
- Preview/Homologa√ß√£o autom√°tico
- Produ√ß√£o controlado
- Health checks obrigat√≥rios
- Monitoramento b√°sico

## Checklist de Valida√ß√£o

### Antes de Gerar C√≥digo
- [ ] **Multi-tenancy** implementado
- [ ] **Soft delete** configurado
- [ ] **Valida√ß√µes** de entrada
- [ ] **Logs** estruturados
- [ ] **Testes** unit√°rios
- [ ] **Padr√µes** de commit
- [ ] **UX/UI** consistente
- [ ] **Performance** otimizada

### Ap√≥s Gerar C√≥digo
- [ ] **Funcionalidade** testada
- [ ] **Multi-tenancy** validado
- [ ] **Soft delete** funcionando
- [ ] **Valida√ß√µes** ativas
- [ ] **Logs** gerando
- [ ] **Testes** passando
- [ ] **Commit** padronizado
- [ ] **Deploy** funcionando