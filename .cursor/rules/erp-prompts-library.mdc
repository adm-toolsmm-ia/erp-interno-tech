---
description: "Biblioteca de Prompts para ERP Interno Tech"
globs: *.ts,*.tsx,*.js,*.jsx
---

# ü§ñ Biblioteca de Prompts - ERP Interno Tech

## Prompts CRUD Padronizados

### 1. **Prompt CRUD Completo**
```
Gere API CRUD completa em Next.js + Prisma para o modelo {MODELO}:

REQUISITOS:
- Endpoint: /api/{modelo}
- M√©todos: GET, POST, PUT, DELETE
- Multi-tenant: filtrar por empresaId
- Valida√ß√£o: usar Zod schemas
- Auditoria: incluir createdBy/updatedBy
- Resposta: JSON autodocumentado com meta

MODELO PRISMA:
{SCHEMA_MODELO}

EXEMPLO DE RESPOSTA:
{
  "data": { /* dados */ },
  "meta": {
    "tenantId": "empresa-123",
    "requestId": "req-456",
    "timestamp": "2025-01-03T17:14:25Z"
  }
}
```

### 2. **Prompt de Valida√ß√£o**
```
Crie schema Zod para valida√ß√£o do modelo {MODELO}:

REQUISITOS:
- Valida√ß√£o de campos obrigat√≥rios
- Valida√ß√£o de tipos de dados
- Valida√ß√£o de regras de neg√≥cio
- Mensagens de erro em portugu√™s
- Sanitiza√ß√£o de inputs

CAMPOS DO MODELO:
{CAMPOS_MODELO}

REGRAS DE NEG√ìCIO:
{REGRAS_NEGOCIO}
```

### 3. **Prompt de Testes**
```
Gere testes unit√°rios e de integra√ß√£o para {FUNCIONALIDADE}:

REQUISITOS:
- Testes com Jest + Testing Library
- Cobertura m√≠nima de 80%
- Testes de cen√°rios de sucesso e erro
- Testes de valida√ß√£o multi-tenant
- Mocks de depend√™ncias externas

FUNCIONALIDADE:
{DESCRICAO_FUNCIONALIDADE}

CEN√ÅRIOS:
- Sucesso: {CENARIO_SUCESSO}
- Erro: {CENARIO_ERRO}
- Valida√ß√£o: {CENARIO_VALIDACAO}
```

## Prompts de Dom√≠nio Espec√≠fico

### 4. **Prompt Gest√£o de Projetos**
```
Implemente funcionalidade de gest√£o de projetos:

CONTEXTO:
- Modelo: Projeto (id, nome, descricao, status, empresaId, clienteId)
- Status: RASCUNHO, ATIVO, PAUSADO, CONCLUIDO, CANCELADO
- Relacionamentos: Cliente, Documentos, Orcamentos

FUNCIONALIDADES:
- Listar projetos por status
- Filtrar por cliente
- Calcular progresso
- Gerar relat√≥rios
- Notifica√ß√µes de prazo

REGRAS:
- Apenas usu√°rios da empresa podem ver projetos
- Clientes externos veem apenas seus projetos
- Auditoria de todas as mudan√ßas
```

### 5. **Prompt Gest√£o de Documentos**
```
Implemente sistema de versionamento de documentos:

CONTEXTO:
- Modelo: Documento (id, nome, versao, conteudo, projetoId, empresaId)
- Versionamento: autom√°tico com hist√≥rico
- Embeddings: para busca sem√¢ntica
- Storage: Supabase Storage

FUNCIONALIDADES:
- Upload de documentos
- Versionamento autom√°tico
- Busca sem√¢ntica
- Download de vers√µes
- Compara√ß√£o de vers√µes

REGRAS:
- Apenas usu√°rios autorizados podem acessar
- Hist√≥rico completo de mudan√ßas
- Backup autom√°tico
```

### 6. **Prompt Gest√£o de Or√ßamentos**
```
Implemente sistema de or√ßamentos e custos:

CONTEXTO:
- Modelo: Orcamento (id, projetoId, valor, moeda, status, empresaId)
- Itens: OrcamentoItem (id, orcamentoId, descricao, quantidade, valorUnitario)
- Status: RASCUNHO, APROVADO, REJEITADO, EXECUTADO

FUNCIONALIDADES:
- Cria√ß√£o de or√ßamentos
- Aprova√ß√£o de or√ßamentos
- Controle de custos
- Relat√≥rios financeiros
- Integra√ß√£o com projetos

REGRAS:
- Apenas gerentes podem aprovar
- Auditoria de mudan√ßas
- C√°lculos autom√°ticos
```

## Prompts de Seguran√ßa

### 7. **Prompt RBAC**
```
Implemente controle de acesso baseado em roles:

CONTEXTO:
- Roles: ADMIN, GERENTE, USUARIO, CLIENTE_EXTERNO
- Permiss√µes: por recurso e a√ß√£o
- Multi-tenant: isolamento por empresa

FUNCIONALIDADES:
- Middleware de autentica√ß√£o
- Valida√ß√£o de permiss√µes
- Filtros de dados por role
- Logs de acesso

REGRAS:
- ADMIN: acesso total √† empresa
- GERENTE: gest√£o de projetos e or√ßamentos
- USUARIO: visualiza√ß√£o e edi√ß√£o limitada
- CLIENTE_EXTERNO: apenas seus projetos
```

### 8. **Prompt Valida√ß√£o de Dados**
```
Implemente valida√ß√£o robusta de dados:

REQUISITOS:
- Valida√ß√£o server-side obrigat√≥ria
- Sanitiza√ß√£o de inputs
- Preven√ß√£o de SQL injection
- Valida√ß√£o de tipos
- Valida√ß√£o de regras de neg√≥cio

CAMPOS CR√çTICOS:
- Emails: formato v√°lido
- CPF/CNPJ: valida√ß√£o de d√≠gitos
- Valores: n√∫meros positivos
- Datas: formato e l√≥gica

SEGURAN√áA:
- Escape de caracteres especiais
- Valida√ß√£o de tamanho
- Preven√ß√£o de XSS
```

## Prompts de Integra√ß√£o

### 9. **Prompt API Externa**
```
Implemente integra√ß√£o com API externa:

CONTEXTO:
- API: {NOME_API}
- Endpoint: {ENDPOINT}
- Autentica√ß√£o: {TIPO_AUTH}
- Rate limiting: {LIMITE}

FUNCIONALIDADES:
- Cliente HTTP configurado
- Tratamento de erros
- Retry autom√°tico
- Cache de respostas
- Logs de integra√ß√£o

REGRAS:
- Timeout configur√°vel
- Valida√ß√£o de respostas
- Fallback em caso de erro
- Monitoramento de performance
```

### 10. **Prompt Webhook**
```
Implemente webhook para notifica√ß√µes:

CONTEXTO:
- Eventos: {LISTA_EVENTOS}
- Endpoint: {URL_WEBHOOK}
- Autentica√ß√£o: HMAC
- Retry: exponencial

FUNCIONALIDADES:
- Envio de notifica√ß√µes
- Valida√ß√£o de assinatura
- Retry autom√°tico
- Logs de entrega
- Status de entrega

REGRAS:
- Assinatura HMAC obrigat√≥ria
- Timeout de 30s
- M√°ximo 3 tentativas
- Logs de auditoria
```

## Prompts de Observabilidade

### 11. **Prompt Logging**
```
Implemente sistema de logging estruturado:

REQUISITOS:
- Logs em JSON
- N√≠veis: DEBUG, INFO, WARN, ERROR
- Contexto: tenantId, userId, requestId
- Sanitiza√ß√£o: dados sens√≠veis mascarados

CAMPOS OBRIGAT√ìRIOS:
- timestamp
- level
- message
- tenantId
- userId
- requestId
- service
- version

SANITIZA√á√ÉO:
- Senhas: [REDACTED]
- Tokens: [REDACTED]
- CPF/CNPJ: [REDACTED]
```

### 12. **Prompt M√©tricas**
```
Implemente sistema de m√©tricas:

REQUISITOS:
- M√©tricas por tenant
- M√©tricas de performance
- M√©tricas de neg√≥cio
- Dashboard em tempo real

M√âTRICAS OBRIGAT√ìRIAS:
- Requests por minuto
- Tempo de resposta
- Taxa de erro
- Usu√°rios ativos
- Projetos criados
- Documentos uploadados

DASHBOARD:
- Gr√°ficos em tempo real
- Alertas configur√°veis
- Exporta√ß√£o de dados
```

## Prompts de IA/ML

### 13. **Prompt Embeddings**
```
Implemente sistema de embeddings para documentos:

CONTEXTO:
- Modelo: text-embedding-ada-002
- Storage: Supabase
- Busca: similaridade por cosseno

FUNCIONALIDADES:
- Gera√ß√£o de embeddings
- Busca sem√¢ntica
- Clustering de documentos
- Recomenda√ß√µes

REGRAS:
- Embeddings gerados automaticamente
- Cache de embeddings
- Valida√ß√£o de qualidade
- Monitoramento de performance
```

### 14. **Prompt Agente Virtual**
```
Implemente agente virtual para atendimento:

CONTEXTO:
- Base de conhecimento: documentos do ERP
- LLM: GPT-4
- RAG: embeddings + Supabase

FUNCIONALIDADES:
- Respostas autom√°ticas
- Busca em documentos
- Gera√ß√£o de relat√≥rios
- Agendamento de reuni√µes

REGRAS:
- Apenas dados da empresa
- Valida√ß√£o de respostas
- Logs de intera√ß√µes
- Escala√ß√£o para humanos
```

## Uso dos Prompts

### Como usar:
1. **Copie o prompt** desejado
2. **Substitua** as vari√°veis em {MAIUSCULAS}
3. **Execute** no Cursor/Lovable
4. **Valide** o resultado
5. **Documente** melhorias

### Versionamento:
- Prompts versionados no Git
- Changelog de mudan√ßas
- Testes de prompts
- Feedback da equipe

### Manuten√ß√£o:
- Atualiza√ß√£o regular
- Valida√ß√£o de efic√°cia
- Otimiza√ß√£o baseada em uso
- Documenta√ß√£o de melhorias