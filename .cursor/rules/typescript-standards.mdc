---
globs: "*.ts,*.tsx"
description: "Padr√µes de qualidade e uso correto do TypeScript"
---

# üìÑ Padr√µes de TypeScript

## Objetivo
Garantir que o c√≥digo em **TypeScript** mantenha alta qualidade, seguran√ßa e legibilidade.
Para isso, erros e warnings n√£o devem ser ignorados sem justificativa clara.

## Regras sobre `@ts-ignore`

### 1. Proibido usar `@ts-ignore` sem explica√ß√£o
- **Nunca adicionar `@ts-ignore` sozinho** em uma linha
- **Sempre documentar o motivo** com um coment√°rio claro e objetivo acima da diretiva
- O coment√°rio deve explicar **por que o erro √© ignorado** e, se poss√≠vel, **qual ser√° a solu√ß√£o futura**

#### ‚úÖ Exemplo correto:
```typescript
// @ts-ignore: biblioteca externa n√£o possui tipos oficiais
import libX from "lib-x";
```

#### ‚ùå Exemplo incorreto:
```typescript
// @ts-ignore
import libX from "lib-x";
```

### 2. Prefira solu√ß√µes adequadas a ignorar tipos
- **Instalar pacotes de tipagem** (`@types/...`) quando dispon√≠veis
- **Criar declara√ß√µes de tipos manuais** quando necess√°rio (`*.d.ts`)
- **Usar `unknown` ou `any` apenas como √∫ltimo recurso**, e sempre com justificativa

## Warnings = Erros

- **Nenhum warning deve ser deixado no c√≥digo**
- **Todos os warnings devem ser tratados como erros** e corrigidos antes de merge
- **Justificativas devem ser adicionadas em coment√°rios** somente se **n√£o houver alternativa vi√°vel**

## Alternativas ao `@ts-ignore`

### 1. Instalar tipos oficiais
```bash
npm install @types/nome-da-biblioteca
```

### 2. Criar declara√ß√µes de tipos customizadas
```typescript
// types/custom.d.ts
declare module 'biblioteca-sem-tipos' {
  export function minhaFuncao(param: string): number;
}
```

### 3. Usar `unknown` com type guards
```typescript
// Em vez de @ts-ignore
const data: unknown = response.data;
if (typeof data === 'string') {
  // Agora TypeScript sabe que data √© string
  console.log(data.toUpperCase());
}
```

### 4. Usar type assertions com cuidado
```typescript
// Apenas quando voc√™ tem certeza do tipo
const element = document.getElementById('myId') as HTMLInputElement;
```

## Checklist antes de commitar c√≥digo TypeScript

- [ ] **N√£o h√° `@ts-ignore` sem coment√°rio explicativo**
- [ ] **Qualquer `@ts-ignore` usado tem justificativa clara e t√©cnica**
- [ ] **N√£o existem warnings pendentes no projeto**
- [ ] **Foram buscadas alternativas melhores** antes de usar `@ts-ignore` ou `any`
- [ ] **O c√≥digo est√° tipado corretamente** e passa em todos os checks de TypeScript
- [ ] **Todas as fun√ß√µes t√™m tipos de retorno expl√≠citos**
- [ ] **Interfaces e tipos est√£o bem definidos**
- [ ] **N√£o h√° uso desnecess√°rio de `any`**

## Exemplos de Boas Pr√°ticas

### ‚úÖ Tipagem expl√≠cita
```typescript
interface User {
  id: number;
  name: string;
  email: string;
}

function createUser(userData: Omit<User, 'id'>): User {
  return {
    id: Date.now(),
    ...userData
  };
}
```

### ‚úÖ Type guards
```typescript
function isString(value: unknown): value is string {
  return typeof value === 'string';
}

function processData(data: unknown): string {
  if (isString(data)) {
    return data.toUpperCase(); // TypeScript sabe que √© string
  }
  throw new Error('Expected string');
}
```

### ‚úÖ Generics apropriados
```typescript
function createArray<T>(length: number, value: T): T[] {
  return Array(length).fill(value);
}
```

## Exemplos de Uso Incorreto ‚ùå

```typescript
// @ts-ignore sem explica√ß√£o
const data = someFunction();

// any desnecess√°rio
function processData(data: any): any {
  return data.something;
}

// Warning ignorado
const unused = 'this will cause a warning';
```

## TypeScript Strict Mode Obrigat√≥rio

### Configura√ß√£o Strict Obrigat√≥ria
- **strict: true** deve estar sempre ativado
- **noImplicitAny: true** - pro√≠be any impl√≠cito
- **strictNullChecks: true** - verifica√ß√£o rigorosa de null/undefined
- **strictFunctionTypes: true** - verifica√ß√£o rigorosa de tipos de fun√ß√£o
- **noImplicitReturns: true** - todas as fun√ß√µes devem ter return expl√≠cito
- **noFallthroughCasesInSwitch: true** - pro√≠be fallthrough em switch
- **noUncheckedIndexedAccess: true** - verifica acesso a √≠ndices

```json
// tsconfig.json - Configura√ß√£o strict obrigat√≥ria
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitThis": true,
    "alwaysStrict": true,
    "exactOptionalPropertyTypes": true,
    "noImplicitOverride": true,
    "noPropertyAccessFromIndexSignature": true,
    "noUncheckedIndexedAccess": true
  }
}
```

### Valida√ß√£o de Configura√ß√£o
```bash
# Script para validar configura√ß√£o strict
npm run type-check:strict

# package.json
{
  "scripts": {
    "type-check": "tsc --noEmit",
    "type-check:strict": "tsc --noEmit --strict",
    "type-check:ci": "tsc --noEmit --strict --noErrorTruncation"
  }
}
```

### Exemplos de C√≥digo Strict-Compliant

#### ‚úÖ Tipagem Expl√≠cita Obrigat√≥ria
```typescript
// ‚úÖ Fun√ß√£o com tipos expl√≠citos
function calculateTotal(items: Item[]): number {
  return items.reduce((total: number, item: Item): number => {
    return total + item.price;
  }, 0);
}

// ‚úÖ Interface bem definida
interface User {
  readonly id: string;
  name: string;
  email: string;
  age?: number; // Optional property
  createdAt: Date;
}

// ‚úÖ Generic com constraints
function processItems<T extends { id: string }>(items: T[]): T[] {
  return items.filter((item: T): boolean => item.id !== '');
}
```

#### ‚úÖ Null Safety Rigorosa
```typescript
// ‚úÖ Verifica√ß√£o expl√≠cita de null/undefined
function getUserName(user: User | null): string {
  if (user === null || user === undefined) {
    return 'Unknown User';
  }
  return user.name;
}

// ‚úÖ Optional chaining e nullish coalescing
function getAddress(user: User): string {
  return user.address?.street ?? 'No address provided';
}

// ‚úÖ Type guards
function isUser(obj: unknown): obj is User {
  return (
    typeof obj === 'object' &&
    obj !== null &&
    'id' in obj &&
    'name' in obj &&
    'email' in obj
  );
}
```

#### ‚úÖ Strict Function Types
```typescript
// ‚úÖ Fun√ß√µes com tipos rigorosos
type EventHandler = (event: Event) => void;
type MouseEventHandler = (event: MouseEvent) => void;

// ‚ùå Isso n√£o compila com strictFunctionTypes
// const handler: EventHandler = (event: MouseEvent) => { ... };

// ‚úÖ Tipos compat√≠veis
const mouseHandler: MouseEventHandler = (event: MouseEvent) => {
  console.log(event.clientX);
};

const eventHandler: EventHandler = mouseHandler; // ‚úÖ Compat√≠vel
```

#### ‚úÖ No Implicit Returns
```typescript
// ‚úÖ Return expl√≠cito em todas as fun√ß√µes
function processData(data: string[]): string[] {
  if (data.length === 0) {
    return []; // Return expl√≠cito
  }
  
  return data.map((item: string): string => {
    return item.toUpperCase(); // Return expl√≠cito
  });
}

// ‚úÖ Fun√ß√µes void expl√≠citas
function logMessage(message: string): void {
  console.log(message);
  // N√£o precisa de return, mas void √© expl√≠cito
}
```

### Verifica√ß√£o de Qualidade TypeScript

#### ESLint Rules para TypeScript
```json
// .eslintrc.js - Regras TypeScript rigorosas
{
  "extends": [
    "@typescript-eslint/recommended",
    "@typescript-eslint/recommended-requiring-type-checking"
  ],
  "rules": {
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/no-implicit-any": "error",
    "@typescript-eslint/explicit-function-return-type": "error",
    "@typescript-eslint/explicit-module-boundary-types": "error",
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/prefer-nullish-coalescing": "error",
    "@typescript-eslint/prefer-optional-chain": "error",
    "@typescript-eslint/strict-boolean-expressions": "error"
  }
}
```

#### Pre-commit Hooks
```json
// package.json - Hooks para valida√ß√£o
{
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "eslint --fix",
      "tsc --noEmit --strict",
      "prettier --write"
    ]
  }
}
```

## Checklist de TypeScript Strict

### Configura√ß√£o
- [ ] **tsconfig.json** com strict: true
- [ ] **Todas as op√ß√µes strict** ativadas
- [ ] **ESLint** configurado com regras TypeScript
- [ ] **Pre-commit hooks** validando tipos

### Desenvolvimento
- [ ] **Zero any** sem justificativa
- [ ] **Tipos expl√≠citos** em todas as fun√ß√µes
- [ ] **Null safety** implementada
- [ ] **Interfaces bem definidas**

### Valida√ß√£o
- [ ] **Compila√ß√£o** sem erros
- [ ] **ESLint** sem warnings
- [ ] **Type checking** no CI/CD
- [ ] **Cobertura de tipos** adequada