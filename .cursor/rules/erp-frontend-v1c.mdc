# üöÄ ERP Frontend V1C - Regras Obrigat√≥rias

## Princ√≠pio Central
**V1C (V1 Completa) obrigat√≥ria**: Toda p√°gina documentada deve existir e ser funcional, sem men√ß√µes a "MVP" ou "Fase 2" nas regras de UI.

## Crit√©rios de Aceita√ß√£o Globais (CAG)

### 1. Funcionalidade Completa
- **TODAS** as p√°ginas documentadas em `docs/01-modulos.md` devem existir e funcionar
- **Bot√µes prim√°rios** sempre abrem modal ou navegam para `/create`
- **Valida√ß√£o Zod** obrigat√≥ria em todos os formul√°rios
- **Submit** persiste dados via API
- **Toast** de sucesso/erro ap√≥s opera√ß√µes
- **Refresh** autom√°tico da view ap√≥s mudan√ßas

### 2. Visualiza√ß√µes Condicionais
- **Lista (Tabela)**: Padr√£o para todas as entidades
- **Kanban**: APENAS quando o schema indicar `status/etapas` (ex: Projetos, Or√ßamentos)
- **Toggle Lista ‚Üî Kanban** no cabe√ßalho quando aplic√°vel

### 3. Layout e Navega√ß√£o
- **Sidebar colaps√°vel** e persistente (localStorage)
- **Topbar** com t√≠tulo e slot de a√ß√µes
- **Breadcrumbs** hier√°rquicos (Empresa > Cliente > Projeto)
- **Foco vis√≠vel** em todos os elementos interativos
- **ESC** sempre fecha modal/drawer
- **Labels/ARIA** em todos os controles

### 4. Proibi√ß√µes Estritas
- ‚ùå **onClick={() => {}}** vazio - falhar lint/build
- ‚ùå **Campos n√£o documentados** - usar `// TODO(docs:<arquivo#linha>)`
- ‚ùå **Rotas n√£o documentadas** - valida√ß√£o autom√°tica obrigat√≥ria
- ‚ùå **Men√ß√µes "MVP/Fase 2"** em regras de UI

### 5. Multi-Tenancy Obrigat√≥ria
- **TODAS** as opera√ß√µes incluem `empresaId`
- **TODAS** as APIs retornam `tenantId` no meta
- **TODAS** as queries filtram por tenant
- **NUNCA** expor dados de outras empresas

### 6. Soft Delete Universal
- **deletedAt** em todos os modelos
- **Filtros deletedAt: null** em todas as queries
- **Auditoria** de exclus√µes com `deletedById`

### 7. Valida√ß√£o e Seguran√ßa
- **Zod schemas** para todas as entradas
- **Sanitiza√ß√£o** de inputs perigosos
- **Logs estruturados** com tenantId
- **Middleware** com `x-internal-key` e `x-tenant-id`

### 8. Observabilidade M√≠nima
- **Health check** em `/api/health`
- **Logs estruturados** com contexto
- **M√©tricas** por tenant
- **Error tracking** com stack traces

## Checklist de Valida√ß√£o V1C

### Antes de Cada Deploy
- [ ] **Todas as rotas documentadas** existem e funcionam
- [ ] **Bot√µes "Novo"** abrem modal/navegam + validam + persistem + toast
- [ ] **Kanban** apenas onde schema tem status/etapas
- [ ] **Multi-tenancy** funcionando em todas as opera√ß√µes
- [ ] **Soft delete** aplicado consistentemente
- [ ] **Logs estruturados** com tenantId
- [ ] **Zero onClick vazios** no c√≥digo
- [ ] **Valida√ß√£o Zod** em todos os forms
- [ ] **Health check** respondendo
- [ ] **Middleware** bloqueando requests inv√°lidos

### Valida√ß√£o Autom√°tica
```bash
npm run validate:routes    # Todas as rotas documentadas existem
npm run check:onclick      # Zero onClick vazios
npm run test:e2e          # Smoke tests b√°sicos
npm run check:all         # Todos os checks acima
```

## Exemplos de Implementa√ß√£o

### Bot√£o "Novo" Funcional
```typescript
// ‚úÖ Correto - Bot√£o funcional
<Button onClick={() => setShowCreateModal(true)}>
  Novo Projeto
</Button>

// ‚ùå Proibido - onClick vazio
<Button onClick={() => {}}>
  Novo Projeto
</Button>
```

### Kanban Condicional
```typescript
// ‚úÖ Apenas quando schema tem status
{hasStatusField && (
  <div className="flex gap-2">
    <Button 
      variant={view === 'list' ? 'default' : 'outline'}
      onClick={() => setView('list')}
    >
      Lista
    </Button>
    <Button 
      variant={view === 'kanban' ? 'default' : 'outline'}
      onClick={() => setView('kanban')}
    >
      Kanban
    </Button>
  </div>
)}
```

### Multi-Tenancy Obrigat√≥ria
```typescript
// ‚úÖ Todas as queries incluem empresaId
const projetos = await prisma.projeto.findMany({
  where: {
    empresaId: req.empresaId, // OBRIGAT√ìRIO
    deletedAt: null, // OBRIGAT√ìRIO
  }
});

// ‚úÖ Resposta inclui tenantId no meta
return Response.json({
  data: projetos,
  meta: {
    tenantId: req.empresaId,
    requestId: crypto.randomUUID(),
    timestamp: new Date().toISOString(),
    version: "1.0.0"
  }
});
```

## Penalidades por N√£o Conformidade

### Build Fails
- **onClick vazio** ‚Üí Falha no lint/build
- **Rotas faltando** ‚Üí Falha no `validate:routes`
- **Multi-tenancy ausente** ‚Üí Falha nos testes

### Code Review Blocker
- **Campos n√£o documentados** ‚Üí PR rejeitado
- **Men√ß√µes "MVP"** ‚Üí PR rejeitado
- **Logs sem tenantId** ‚Üí PR rejeitado

## Integra√ß√£o com CI/CD

### Pipeline Obrigat√≥rio
```yaml
- name: Validate V1C
  run: |
    npm run validate:routes
    npm run check:onclick
    npm run test:e2e
    npm run lint
    npm run type-check
```

### Branch Protection
- **Status checks** devem passar
- **Code review** obrigat√≥rio
- **Conformidade V1C** validada

## Escalabilidade V1C

### Pr√≥ximas Vers√µes
- **V1.1**: Adicionar novos m√≥dulos documentados
- **V1.2**: Melhorias de performance
- **V1.3**: Integra√ß√µes externas
- **V2.0**: Refatora√ß√µes arquiteturais

### Manuten√ß√£o
- **Documenta√ß√£o viva** sempre atualizada
- **Testes regressivos** para V1C
- **Monitoramento** de conformidade
- **Feedback loop** cont√≠nuo