---
alwaysApply: true
description: "Arquitetura MVP do ERP Interno Tech com foco em multi-tenancy e IA"
---

# 🏗️ ERP Architecture MVP — ERPInternoTech

## Contexto do Projeto
- **ERP interno** da empresa Tech em fase **MVP**
- **Back-end**: Supabase (Postgres + Storage + Edge Functions)
- **Front-end**: Next.js 15 (App Router) + Tailwind + Shadcn/UI + Prisma ORM
- **Deploy**: Vercel (Prod, Preview/Homologação, Dev)
- **Autenticação**: Não implementada no MVP (Fase 2)

## Regras de Arquitetura Obrigatórias

### Multi-Tenancy Rigorosa
- **TODAS** as operações devem filtrar por `empresaId`
- **TODAS** as queries Prisma devem incluir `where: { empresaId }`
- **TODAS** as APIs devem retornar `tenantId` no meta
- **NUNCA** expor dados de outras empresas

### Soft Delete Universal
- **TODOS** os modelos devem ter `deletedAt: DateTime?`
- **TODAS** as queries devem filtrar `deletedAt: null`
- **TODAS** as exclusões devem ser soft delete
- **NUNCA** deletar dados permanentemente

### Seeds Versionados
- Seeds em `prisma/seed.ts` com versionamento
- Documentação de classificação para IA
- CSV + Markdown explicativo
- Versionamento semântico dos seeds

### Testes Obrigatórios
- **SEMPRE** gerar testes unitários básicos (CRUD)
- **SEMPRE** testar multi-tenancy
- **SEMPRE** testar soft delete
- **SEMPRE** testar validações

### Observabilidade Mínima
- Endpoint `/api/health` obrigatório
- Logs de erro em console estruturados
- Métricas básicas de performance
- Rastreamento de operações críticas

## Estrutura de Pastas Obrigatória
```
src/
├── app/
│   ├── api/
│   │   ├── health/
│   │   ├── empresas/
│   │   ├── clientes/
│   │   ├── projetos/
│   │   ├── documentos/
│   │   └── orcamentos/
│   └── (dashboard)/
├── components/
│   ├── ui/           # Shadcn/UI components
│   ├── forms/        # Formulários específicos
│   ├── tables/       # Tabelas e listas
│   ├── modals/       # Modais de criação
│   ├── drawers/      # Drawers de edição
│   └── dashboards/   # Visões 360º
├── lib/
│   ├── prisma.ts
│   ├── supabase.ts
│   ├── auth.ts       # Preparação para Fase 2
│   └── utils.ts
├── hooks/
│   ├── use-tenant.ts
│   ├── use-crud.ts
│   └── use-export.ts
└── types/
    ├── api.ts
    ├── database.ts
    └── ui.ts
```

## Padrões de API Obrigatórios

### Estrutura de Resposta
```typescript
interface ApiResponse<T> {
  data: T;
  meta: {
    tenantId: string;
    requestId: string;
    timestamp: string;
    version: string;
  };
}
```

### Endpoints Padrão
```typescript
// GET /api/[resource]
async function GET(request: Request, { params }: { params: { resource: string } }) {
  // Sempre filtrar por empresaId
  // Sempre incluir meta
  // Sempre paginar
}

// POST /api/[resource]
async function POST(request: Request) {
  // Sempre validar empresaId
  // Sempre aplicar soft delete
  // Sempre retornar meta
}

// PUT /api/[resource]/[id]
async function PUT(request: Request, { params }: { params: { id: string } }) {
  // Sempre validar tenant
  // Sempre aplicar soft delete
  // Sempre auditar mudanças
}

// DELETE /api/[resource]/[id]
async function DELETE(request: Request, { params }: { params: { id: string } }) {
  // Sempre soft delete
  // Sempre auditar
  // Sempre validar tenant
}
```

## Referências de Documentação
- [UX/UI Guidelines](mdc:docs/06-ux-ui.md)
- [UX Flows](mdc:docs/07-ux-flows.md)
- [UI Components](mdc:docs/08-ux-components.md)
- [Commit Standards](mdc:docs/09-git-commit-guide.md)