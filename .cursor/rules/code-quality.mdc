---
alwaysApply: true
description: "Padr칫es de qualidade de c칩digo e boas pr치ticas"
---

# 游댳 Padr칫es de Qualidade de C칩digo

## Princ칤pios Fundamentais
- **Sempre responder em portugu칡s brasileiro**
- **Sempre prefira solu칞칫es simples**
- **Evite duplica칞칚o de c칩digo** - verificar outras 치reas do c칩digo que j치 possam ter funcionalidade semelhante
- **Escreva c칩digo considerando diferentes ambientes**: dev, test e prod
- **Seja cauteloso** - fazer apenas mudan칞as solicitadas ou bem compreendidas
- **Mantenha c칩digo bem estruturado e organizado**

## Regras de Estrutura
- **Evite arquivos com mais de 200-300 linhas** - refatore nesse ponto
- **Quando um arquivo se tornar muito longo, divida-o em arquivos menores**
- **Quando uma fun칞칚o se tornar muito longa, divida-a em fun칞칫es menores**
- **Evite escrever scripts em arquivos** se poss칤vel, especialmente se executado apenas uma vez

## Tratamento de Dados
- **Dados simulados s칚o necess치rios apenas para testes** - nunca simule dados para dev ou prod
- **Nunca sobrescreva arquivo .env** sem primeiro perguntar e confirmar

## Depura칞칚o e Corre칞칚o
- **Ao corrigir um problema ou bug, n칚o introduza novo padr칚o ou tecnologia** sem primeiro esgotar todas as op칞칫es da implementa칞칚o existente
- **Se introduzir nova implementa칞칚o, certifique-se de remover a implementa칞칚o antiga** para evitar l칩gica duplicada

## Ferramentas Autom치ticas Obrigat칩rias

### ESLint
- **Configura칞칚o obrigat칩ria** com regras TypeScript/React
- **Zero warnings** permitidos no c칩digo
- **Pre-commit hook** para valida칞칚o autom치tica
- **Integra칞칚o com IDE** para feedback em tempo real

```json
// .eslintrc.js - Configura칞칚o m칤nima obrigat칩ria
{
  "extends": [
    "@typescript-eslint/recommended",
    "@typescript-eslint/recommended-requiring-type-checking",
    "prettier"
  ],
  "rules": {
    "@typescript-eslint/no-unused-vars": "error",
    "@typescript-eslint/no-explicit-any": "error",
    "@typescript-eslint/explicit-function-return-type": "error",
    "no-console": "warn",
    "prefer-const": "error"
  }
}
```

### Prettier
- **Formata칞칚o autom치tica** em todos os arquivos
- **Configura칞칚o padronizada** no projeto
- **Integra칞칚o com ESLint** para evitar conflitos
- **Pre-commit hook** para formata칞칚o autom치tica

```json
// .prettierrc - Configura칞칚o padr칚o
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false
}
```

### Husky + lint-staged
- **Pre-commit hooks** obrigat칩rios
- **Valida칞칚o autom치tica** antes de cada commit
- **Formata칞칚o autom치tica** de arquivos modificados
- **Bloqueio de commits** com erros de lint

```json
// package.json - Scripts obrigat칩rios
{
  "scripts": {
    "lint": "eslint . --ext .ts,.tsx,.js,.jsx",
    "lint:fix": "eslint . --ext .ts,.tsx,.js,.jsx --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "type-check": "tsc --noEmit",
    "quality": "npm run type-check && npm run lint && npm run format:check"
  },
  "lint-staged": {
    "*.{ts,tsx,js,jsx}": [
      "eslint --fix",
      "prettier --write"
    ]
  }
}
```

### TypeScript Strict Mode
- **Configura칞칚o strict** obrigat칩ria no tsconfig.json
- **Zero any** permitidos sem justificativa
- **Tipagem expl칤cita** em todas as fun칞칫es
- **Valida칞칚o de tipos** em tempo de compila칞칚o

```json
// tsconfig.json - Configura칞칚o strict obrigat칩ria
{
  "compilerOptions": {
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true
  }
}
```

## Checklist de Qualidade Autom치tica

### Antes de Cada Commit
- [ ] **ESLint passa** sem warnings ou erros
- [ ] **Prettier formata** todos os arquivos
- [ ] **TypeScript compila** sem erros
- [ ] **Husky hooks** executam com sucesso
- [ ] **Lint-staged** processa arquivos modificados

### Configura칞칚o de IDE
- [ ] **ESLint extension** instalada e configurada
- [ ] **Prettier extension** instalada e configurada
- [ ] **TypeScript extension** com strict mode
- [ ] **Auto-format on save** habilitado
- [ ] **Auto-fix on save** habilitado

### CI/CD Pipeline
- [ ] **Lint step** no pipeline de CI
- [ ] **Type check step** no pipeline de CI
- [ ] **Format check step** no pipeline de CI
- [ ] **Falha do build** se qualidade n칚o passar
- [ ] **Relat칩rio de qualidade** gerado automaticamente

## Reflex칚o P칩s-Implementa칞칚o
Ap칩s escrever o c칩digo, reflita profundamente sobre:
- **Escalabilidade** da mudan칞a
- **Manutenibilidade** da mudan칞a
- **An치lise de 1 a 2 par치grafos** sobre a altera칞칚o do c칩digo
- **Sugest칫es de melhorias** ou pr칩ximos passos baseados na reflex칚o
- **Conformidade com ferramentas** autom치ticas de qualidade