---
alwaysApply: true
description: "Governan√ßa de branches, PRs e workflow de desenvolvimento com naming conventions e prote√ß√µes"
---

# üåø Governan√ßa de Branches e PRs

## Branch Naming Convention Obrigat√≥ria

### Padr√£o de Nomenclatura
```bash
# Formato: {tipo}/{descri√ß√£o-curta}
feature/user-authentication
fix/login-validation-error
hotfix/security-vulnerability
refactor/extract-validation-service
docs/api-documentation
test/add-user-service-tests
chore/update-dependencies
```

### Tipos de Branch Permitidos
- **`feature/`** - Novas funcionalidades
- **`fix/`** - Corre√ß√µes de bugs
- **`hotfix/`** - Corre√ß√µes urgentes em produ√ß√£o
- **`refactor/`** - Refatora√ß√µes de c√≥digo
- **`docs/`** - Mudan√ßas na documenta√ß√£o
- **`test/`** - Adi√ß√£o ou corre√ß√£o de testes
- **`chore/`** - Tarefas de manuten√ß√£o

### Valida√ß√£o Autom√°tica de Naming
```yaml
# .github/workflows/branch-naming.yml
name: Branch Naming Check

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  check-branch-naming:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch naming
        run: |
          BRANCH_NAME=${GITHUB_HEAD_REF}
          if ! echo "$BRANCH_NAME" | grep -E "^(feature|fix|hotfix|refactor|docs|test|chore)/[a-z0-9-]+$"; then
            echo "‚ùå Branch name '$BRANCH_NAME' does not follow convention"
            echo "Expected format: {type}/{description}"
            echo "Valid types: feature, fix, hotfix, refactor, docs, test, chore"
            exit 1
          fi
          echo "‚úÖ Branch naming convention followed"
```

## Branch Protection Rules

### Configura√ß√£o Obrigat√≥ria
```yaml
# .github/branch-protection.yml
name: Configure Branch Protection

on:
  push:
    branches: [main, develop]

jobs:
  protect-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Protect main branch
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'main',
              required_status_checks: {
                strict: true,
                contexts: [
                  'Type Check',
                  'Lint',
                  'Tests',
                  'Security Audit',
                  'Coverage',
                  'Documentation Check'
                ]
              },
              enforce_admins: true,
              required_pull_request_reviews: {
                required_approving_review_count: 2,
                dismiss_stale_reviews: true,
                require_code_owner_reviews: true,
                required_reviewers: ['senior-dev', 'tech-lead']
              },
              restrictions: null,
              allow_force_pushes: false,
              allow_deletions: false
            });
      
      - name: Protect develop branch
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.updateBranchProtection({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: 'develop',
              required_status_checks: {
                strict: true,
                contexts: [
                  'Type Check',
                  'Lint',
                  'Tests',
                  'Security Audit'
                ]
              },
              enforce_admins: true,
              required_pull_request_reviews: {
                required_approving_review_count: 1,
                dismiss_stale_reviews: true,
                require_code_owner_reviews: false
              },
              restrictions: null
            });
```

## Pull Request Template

### Template Obrigat√≥rio
```markdown
<!-- .github/pull_request_template.md -->
## üìã Descri√ß√£o
<!-- Descreva brevemente as mudan√ßas realizadas -->

## üéØ Tipo de Mudan√ßa
- [ ] üêõ Bug fix (mudan√ßa que corrige um problema)
- [ ] ‚ú® Nova funcionalidade (mudan√ßa que adiciona funcionalidade)
- [ ] üí• Breaking change (corre√ß√£o ou funcionalidade que causaria mudan√ßa em funcionalidade existente)
- [ ] üìö Documenta√ß√£o (mudan√ßa apenas na documenta√ß√£o)
- [ ] üîß Refatora√ß√£o (mudan√ßa de c√≥digo que n√£o corrige bug nem adiciona funcionalidade)
- [ ] ‚ö° Performance (mudan√ßa que melhora performance)
- [ ] üß™ Testes (adi√ß√£o ou corre√ß√£o de testes)

## üîó Issues Relacionadas
<!-- Link para issues relacionadas -->
Fixes #(issue)

## üß™ Como Testar
<!-- Descreva os passos para testar as mudan√ßas -->
1. 
2. 
3. 

## üì∏ Screenshots (se aplic√°vel)
<!-- Adicione screenshots para ajudar a explicar as mudan√ßas -->

## ‚úÖ Checklist
- [ ] Meu c√≥digo segue as diretrizes de estilo do projeto
- [ ] Realizei uma auto-revis√£o do meu c√≥digo
- [ ] Comentei c√≥digo complexo ou dif√≠cil de entender
- [ ] Fiz as mudan√ßas correspondentes na documenta√ß√£o
- [ ] Minhas mudan√ßas n√£o geram novos warnings
- [ ] Adicionei testes que provam que minha corre√ß√£o √© eficaz ou que minha funcionalidade funciona
- [ ] Testes novos e existentes passam localmente com minhas mudan√ßas
- [ ] Qualquer mudan√ßa dependente foi mergeada e publicada

## üîí Seguran√ßa
- [ ] N√£o expus informa√ß√µes sens√≠veis
- [ ] Validei todas as entradas do usu√°rio
- [ ] Implementei autentica√ß√£o/autoriza√ß√£o adequada
- [ ] Testei cen√°rios de seguran√ßa

## üìä Performance
- [ ] Minhas mudan√ßas n√£o degradam a performance
- [ ] Implementei cache quando apropriado
- [ ] Otimizei queries de banco de dados
- [ ] Testei com dados de volume real

## üåê Multi-Tenancy
- [ ] Todas as opera√ß√µes incluem `tenantId`
- [ ] RLS est√° configurado corretamente
- [ ] Cache √© invalidado por tenant
- [ ] Logs incluem contexto de tenant
```

## Code Review Guidelines

### Checklist para Revisores
```markdown
## üîç Checklist de Code Review

### Funcionalidade
- [ ] O c√≥digo faz o que deveria fazer?
- [ ] A l√≥gica est√° correta?
- [ ] H√° casos edge n√£o cobertos?
- [ ] A performance est√° adequada?

### C√≥digo
- [ ] O c√≥digo √© leg√≠vel e bem estruturado?
- [ ] Segue os padr√µes do projeto?
- [ ] N√£o h√° duplica√ß√£o desnecess√°ria?
- [ ] Nomes de vari√°veis/fun√ß√µes s√£o descritivos?

### Testes
- [ ] Testes cobrem a funcionalidade?
- [ ] Testes s√£o significativos e n√£o fr√°geis?
- [ ] Cobertura de c√≥digo √© adequada?

### Seguran√ßa
- [ ] N√£o h√° vulnerabilidades de seguran√ßa?
- [ ] Valida√ß√£o de entrada est√° adequada?
- [ ] Dados sens√≠veis n√£o s√£o expostos?

### Documenta√ß√£o
- [ ] README.md foi atualizado?
- [ ] CHANGELOG.md foi atualizado?
- [ ] Coment√°rios explicam c√≥digo complexo?

### Multi-Tenancy
- [ ] `tenantId` est√° presente em todas as opera√ß√µes?
- [ ] RLS est√° configurado corretamente?
- [ ] Cache √© invalidado por tenant?
```

## Workflow de Desenvolvimento

### 1. Cria√ß√£o de Branch
```bash
# Sempre partir da main/develop
git checkout main
git pull origin main
git checkout -b feature/user-authentication

# Ou para hotfix
git checkout -b hotfix/security-vulnerability
```

### 2. Desenvolvimento
```bash
# Commits frequentes e bem descritos
git add .
git commit -m "feat: adicionar valida√ß√£o de email no registro"

# Push regular para backup
git push origin feature/user-authentication
```

### 3. Pull Request
```bash
# Criar PR via GitHub CLI
gh pr create --title "feat: implementar autentica√ß√£o de usu√°rio" \
  --body "Implementa sistema completo de autentica√ß√£o com JWT e MFA" \
  --assignee @me \
  --reviewer senior-dev,tech-lead
```

### 4. Merge Strategy
```bash
# Squash and merge para features
# Merge commit para hotfixes cr√≠ticos
# Rebase antes do merge para hist√≥rico limpo
```

## Valida√ß√µes Autom√°ticas de PR

### Pre-merge Checks
```yaml
# .github/workflows/pr-validation.yml
name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Check PR title
        run: |
          TITLE="${{ github.event.pull_request.title }}"
          if ! echo "$TITLE" | grep -E "^(feat|fix|hotfix|refactor|docs|test|chore):"; then
            echo "‚ùå PR title must start with type (feat, fix, hotfix, refactor, docs, test, chore)"
            exit 1
          fi
      
      - name: Check file changes
        run: |
          # Verificar se arquivos cr√≠ticos foram alterados
          if git diff --name-only origin/main...HEAD | grep -E "package\.json|yarn\.lock|package-lock\.json"; then
            echo "‚ö†Ô∏è Dependencies changed - ensure security audit passes"
          fi
      
      - name: Check documentation
        run: |
          # Verificar se docs foram atualizados para mudan√ßas significativas
          if git log --oneline origin/main...HEAD | grep -E "^(feat|fix):" && ! git diff --name-only origin/main...HEAD | grep -E "README\.md|CHANGELOG\.md"; then
            echo "‚ùå Feat/Fix commits must update documentation"
            exit 1
          fi
      
      - name: Check commit messages
        run: |
          # Verificar se commits seguem conven√ß√£o
          git log --oneline origin/main...HEAD | while read commit; do
            if ! echo "$commit" | grep -E "^(feat|fix|hotfix|refactor|docs|test|chore):"; then
              echo "‚ùå Commit message '$commit' does not follow convention"
              exit 1
            fi
          done
```

## Merge Policies

### Estrat√©gias por Tipo de Branch
```yaml
# Configura√ß√£o de merge policies
merge_policies:
  feature/*:
    strategy: "squash_and_merge"
    delete_branch: true
    require_approval: 2
  
  fix/*:
    strategy: "squash_and_merge"
    delete_branch: true
    require_approval: 1
  
  hotfix/*:
    strategy: "merge_commit"
    delete_branch: false
    require_approval: 2
    auto_merge: false
  
  refactor/*:
    strategy: "squash_and_merge"
    delete_branch: true
    require_approval: 2
  
  docs/*:
    strategy: "squash_and_merge"
    delete_branch: true
    require_approval: 1
  
  test/*:
    strategy: "squash_and_merge"
    delete_branch: true
    require_approval: 1
  
  chore/*:
    strategy: "squash_and_merge"
    delete_branch: true
    require_approval: 1
```

## Auto-merge para Mudan√ßas Menores

### Configura√ß√£o de Auto-merge
```yaml
# .github/workflows/auto-merge.yml
name: Auto-merge

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.draft == false &&
      contains(github.event.pull_request.labels.*.name, 'auto-merge') &&
      github.event.pull_request.user.type != 'Bot'
    steps:
      - name: Enable auto-merge
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --auto --squash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```

## ‚úÖ Checklist Score 10

### Branch Naming
- [ ] **Conven√ß√£o** seguida rigorosamente
- [ ] **Valida√ß√£o autom√°tica** configurada
- [ ] **Tipos permitidos** bem definidos
- [ ] **Exemplos claros** documentados

### Branch Protection
- [ ] **Main branch** protegida com 2 aprova√ß√µes
- [ ] **Develop branch** protegida com 1 aprova√ß√£o
- [ ] **Status checks** obrigat√≥rios
- [ ] **Force push** desabilitado

### Pull Requests
- [ ] **Template** obrigat√≥rio preenchido
- [ ] **Valida√ß√µes autom√°ticas** funcionando
- [ ] **Code review** estruturado
- [ ] **Merge policies** definidas

### Workflow
- [ ] **Processo claro** documentado
- [ ] **Ferramentas** configuradas
- [ ] **Automa√ß√£o** implementada
- [ ] **Qualidade** garantida